<rm-menu-item>
    <button tabindex={ props.tabindex } onclick={ setSelected.bind(this, true) }><slot /></button>

    <style>
        :host {
            display: contents;
        }
        :host > button {
            font-size: 16px;
            line-height: 1.5em;
            padding: 0.75em 1em;
            border: 0;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
            outline: none;
            display: block;
            min-height: 3em;
        }
        :host[title] > button {
            font-weight: bold;
            color: rgba(0, 0, 0, 0.9);
        }
        :host[inset] > button {
            padding-left: 4.5em;
        }
        :host[short-inset] > button {
            padding-left: 2em;
        }
        :host[passive] > button {
            cursor: initial;
        }
    </style>

    <script>
        import * as riot from "riot";
        import { ripple } from "@riot-material/ripple";


        export default {
            _select: null,
            onMounted() {
                Object.defineProperty(this.root, "value", {
                    get: this.getValue.bind(this),
                    set: this.setValue.bind(this)
                });
                Object.defineProperty(this.root, "label", {
                    get: this.getLabel.bind(this),
                    set: this.setLabel.bind(this)
                });
                Object.defineProperty(this.root, "selected", {
                    get: this.getSelected.bind(this),
                    get: this.setSelected.bind(this)
                });
                let parent = this.root.parentElement;
                while (parent) {
                    const instance = parent[riot.__.globals.DOM_COMPONENT_INSTANCE_PROPERTY];
                    if (instance != null && instance.name === "rm-select") {
                        parent = instance;
                        break;
                    }
                    parent = parent.parentElement;
                }
                if (parent != null) {
                    if (this.getSelected()) {
                        parent.select(this.getValue());
                    }
                    this._select = parent;
                }
                if (this.props.tabindex == null || !(parseInt(this.props.tabindex) < 0)) {
                    ripple(this.root.firstElementChild, {
                        highlight: !this.getPassive(),
                        instantHighlight: true,
                        disabled: this.getPassive()
                    });
                }
            },
            onUpdated() {
                if (this.props.tabindex == null || !(parseInt(this.props.tabindex) < 0)) {
                    ripple(this.root.firstElementChild, {
                        highlight: !this.getPassive(),
                        instantHighlight: true,
                        disabled: this.getPassive()
                    });
                }
            },
            getPassive() {
                return this.props.passive != null && this.props.passive !== false;
            },
            getLabel() {
                const label = this.root.getAttribute("label");
                return label != null ? label : this.root.innerText;
            },
            setLabel(label) {
                this.root.setAttribute("value", label);
            },
            getValue() {
                const value = this.root.getAttribute("value");
                return value != null ? value : "";
            },
            setValue(value) {
                this.root.setAttribute("value", value);
            },
            getSelected() {
                if (this.getPassive()) {
                    return false;
                }
                if (this._select == null) {
                    return this.root.getAttribute("selected") != null;
                }
                return this._select.hasSelected(this.getValue());
            },
            setSelected(selected) {
                if (this.getPassive()) {
                    return;
                }
                if (this._select == null) {
                    return this.root.setAttribute("selected", "");
                }
                return this._select.select(this.getValue());
            }
        }
    </script>
</rm-menu-item>