<rm-list-item tabindex={ isPassive() ? "" : "0" } style={
    isSelected() && props.selectedColor != null ? "color:" + props.selectedColor + ";" : ""
}>
    <div style="display: table; width: 100%;">
        <div style="display: table-cell; width: 1px; padding-right: 16px; vertical-align: middle;" if={ _hasSlot("leading") }>
            <slot name="leading"></slot>
        </div>
        <div style="display: table-cell; max-width: 256px; padding: 0.25em 0; vertical-align: middle;"><div>
            <span style="float: right;"><slot name="trailing"></slot></span>
            <div style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                <template if={ !_hasSlot("default") }>{ props.label || "\xa0" }</template>
                <slot></slot>
            </div>
            <div style="clear: both;"></div>
        </div></div>
    </div>

    <style>
        :host {
            outline: none;
            display: block;
            padding: .5em 1em;
            line-height: 1.5em;
            cursor: pointer;
            user-select: none;
        }

        rm-icon, .material-icons {
            margin-right: 16px;
        }
        rm-button {
            margin: -8px;
            vertical-align: top;
        }

        :host.selected {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary, 139, 0, 139));
        }

        :host[passive] {
            cursor: default;
        }
    </style>

    <script>
        import { ripple } from "@riot-material/ripple";

        export default {
            _selectedHighlight: null,
            _hasSlot(name) {
                return this.slots.some(slot => slot.id === name);
            },
            _updateRipple() {
                const passive = this.isPassive();
                ripple(this.root, { highlight: !passive, instantHighlight: true, disabled: passive });
            },
            _updateSelected() {
                if (this.isSelected()) {
                    this.root.classList.add("selected");
                    if (this._selectedHighlight == null) {
                        this._selectedHighlight = ripple(this.root).highlight();
                    }
                } else {
                    this.root.classList.remove("selected");
                    if (this._selectedHighlight != null) {
                        this._selectedHighlight.end();
                        this._selectedHighlight = null;
                    }
                }
            },
            isPassive() {
                return this.props.passive != null && this.props.passive !== false;
            },
            onMounted() {
                let value = undefined;
                Object.defineProperties(this.root, {
                    value: {
                        get: () => {
                            if (value === undefined) {
                                return this.props.value == null ? null : this.props.value + "";
                            }
                            return value;
                        },
                        set(v) {
                            value = v == null ? null : this.props.value + "";
                        }
                    },
                    label: {
                        get: () => {
                            return this.props.label == null ?
                                (this._hasSlot("default") ? this.root.innerText : "") :
                                this.props.label + ""
                            ;
                        }
                    },
                    selected: {
                        get: () => this.isSelected(),
                        set: value => {
                            this.update({ selected: value != null && value !== false });
                        }
                    }
                });
                if (this.props.value != null && this.props.menuOption == null) {
                    this.root.setAttribute("menu-option", "");
                }
                this._updateRipple();
                this._updateSelected();
            },
            shouldUpdate(newProps, currentProps) {
                if ("selected" in newProps) {
                    delete this.state.selected;
                }
            },
            onUpdated() {
                this._updateRipple();
                this._updateSelected();
            },
            isSelected() {
                return this.isPassive() ?
                    false :
                    (this.state.selected != null ?
                        this.state.selected !== false :
                        (this.props.selected != null && this.props.selected !== false)
                    )
                ;
            }
        }
    </script>
</rm-list-item>