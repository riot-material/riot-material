<rm-dialog>
    <div ref="aligner"></div>
    <div onclick={ _oncontainerclick } class="mdc-elevation--z24" ref="container">
        <div ref="title" class="rm-{ getSurface() }-surface">
            <slot name="title" />
        </div>
        <div ref="content" class="rm-{ getSurface() }-surface">
            <slot name="content" />
        </div>
        <div ref="actions" class="rm-{ getSurface() }-surface">
            <slot name="actions" />
        </div>
    </div>

    <style>
        :host {
            position: fixed;
            display: block;
            top: 0; bottom: 0;
            right: 0; left: 0;
            padding: 40px;
            background: rgba(0, 0, 0, .42);
            background: rgba(0, 0, 0, var(--color-opacity-secondary, .42));
            box-sizing: border-box;
            z-index: 100;
            font-size: 0;
            text-align: center;
        }
        :host > [ref=aligner]{
            width: 0;
            height: 100%;
            vertical-align: middle;
            display: inline-block;
        }
        :host > [ref=container]{
            width: 100%;
            font-size: 16px;
            vertical-align: middle;
            display: inline-block;
            max-width: 560px;
            text-align: initial;
        }

        :host > [ref=container] > [ref=title] {
            min-height: 8px;
            border-radius: 4px 4px 0 0;
        }

        :host > [ref=container] > [ref=content] {
            overflow: auto;
        }

        :host > [ref=container] > [ref=actions] {
            min-height: 8px;
            border-radius: 0 0 4px 4px;
        }
    </style>

    <script>
        import "@riot-material/surfaces";

        export default {
            state: {
                clickedContainer: false
            },
            _onresize: null,
            onMounted() {
                this.root.addEventListener("click", () => {
                    if (this.state.clickedContainer) {
                        return;
                    }
                    this.close(null);
                });
                window.addEventListener("resize", this._onresize = () => {
                    this.update();
                });
                this.root.style.display = "none";
                this.root.close = (result) => {
                    this.close(result);
                };
                this.root.open = (...detail) => {
                    this.open(...detail);
                };
                this.root._wrapTo = (wrapper) => {
                    wrapper.open = this.root.open;
                    wrapper.close = this.root.close;
                    try {
                        Object.defineProperties(wrapper, {
                            opened: {
                                get: () => {
                                    return this.opened;
                                },
                                configurable: true
                            },
                            result: {
                                get: () => {
                                    return this.result;
                                },
                                configurable: true
                            }
                        });
                    } catch (e) {
                        console.warn("cannot wrap properties", e.message);
                    }
                };
                Object.defineProperties(this.root, {
                    opened: {
                        get: () => {
                            return this.root.style.display !== "none";
                        }
                    },
                    result: {
                        get: () => {
                            return this._result;
                        }
                    }
                });
            },
            onUnmounted() {
                window.removeEventListener("resize", this._onresize);
            },
            _oncontainerclick() {
                this.state.clickedContainer = true;
                setTimeout(() => {
                    this.state.clickedContainer = false;
                }, 0);
            },
            shouldUpdate() {
                return this.root.style.display !== "none";
            },
            onUpdated() {
                this.root.querySelector("[ref=content]").style.maxHeight = this.getContentMaxHeight() + "px";
            },
            _result: 0,
            close(result) {
                if (this.root.style.display === "none") {
                    return;
                }
                this._result = result || null;
                this.root.style.display = "none";
                this.root.dispatchEvent(new CustomEvent("close", { bubbles: true, detail: { result: this.root.result } }));
            },
            open(...detail) {
                if (this.root.style.display !== "none") {
                    return;
                }
                this.root.style.display = "";
                this.update();
                this.root.dispatchEvent(new CustomEvent("open", { bubbles: true, detail }));
            },
            getContentMaxHeight() {
                return (
                    this.root.querySelector("[ref=aligner]").getBoundingClientRect().height -
                    this.root.querySelector("[ref=title]").getBoundingClientRect().height -
                    this.root.querySelector("[ref=actions]").getBoundingClientRect().height
                );
            },
            getSurface() {
                if (this.props.surface == null || ![
                    "black",
                    "dark" ,
                    "light"
                ].includes(this.props.surface)) {
                    return "white";
                }
                return this.props.surface;
            }
        }
    </script>
</rm-dialog>