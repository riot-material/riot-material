<rm-button>
    <button if={ !isIcon() } style={ props.buttonStyle } disabled={ isDisabled() } type={ props.type }><slot /></button>
    <button if={ isIcon() } disabled={ isDisabled() } type={ props.type }>
        <rm-icon style={ props.iconStyle }><slot /></rm-icon>
    </button>

    <!--  https://material.angular.io/components/button/examples  -->
    <style>
        :host {
            font-size: 14px;
            display: inline-block;
            margin-right: 8px;
            vertical-align: middle;
            border-radius: 4px;
            background: transparent;
            height: 2.571em;
        }
        button {
            font-size: inherit;
            font-weight: inherit;
            cursor: pointer;
            border: none;
            padding: 0 16px;
            border-radius: inherit;
            background: inherit;
            box-sizing: border-box;
            vertical-align: inherit;
            width: 100%;
            height: 100%;
            color: inherit;
            outline: none;
            /* https://stackoverflow.com/a/21003770/9228492 */
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
            position: relative;
        }
        :host[dense-padding]:not([dense-padding="false"]) button {
            padding: 0 8px;
        }
        /* https://stackoverflow.com/a/11603104 */
        button::-moz-focus-inner {
            border: none;
        }
        :host[variant="icon"] {
            border-radius: 50%;
        }
        :host[variant="icon"] button {
            padding: 8px;
        }
        :host[variant="icon"] {
            height: 2.8571em;
        }
        :host[variant="unelevated"],
        :host[variant="raised"] {
            background: rgb(255, 255, 255);
            background: rgb(var(--color-white-surface, 255, 255, 255));
            color: rgb(0, 0, 0);
            color: rgb(var(--color-on-white, 0, 0, 0));
        }
        .rm-black-surface :host[variant="unelevated"],
        .rm-black-surface :host[variant="raised"] {
            background: rgb(255, 255, 255);
            background: rgb(var(--color-white-surface, 255, 255, 255));
            color: rgb(0, 0, 0);
            color: rgb(var(--color-on-white, 0, 0, 0));
        }
        .rm-dark-surface :host[variant="unelevated"],
        .rm-dark-surface :host[variant="raised"] {
            background: rgb(250, 250, 250);
            background: rgb(var(--color-light-surface, 250, 250, 250));
            color: rgb(0, 0, 0);
            color: rgb(var(--color-on-light, 0, 0, 0));
        }
        .rm-light-surface :host[variant="unelevated"],
        .rm-light-surface :host[variant="raised"] {
            background: rgb(10, 10, 10);
            background: rgb(var(--color-dark-surface, 10, 10, 10));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-dark, 255, 255, 255));
        }
        .rm-white-surface :host[variant="unelevated"],
        .rm-white-surface :host[variant="raised"] {
            background: rgb(0, 0, 0);
            background: rgb(var(--color-black-surface, 0, 0, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-black, 255, 255, 255));
        }

        :host[variant="outlined"] button::before {
            content: ""; position: absolute;
            top: 0; bottom: 0;
            right: 0; left: 0;
            border: 1px solid rgba(0, 0, 0, .12);
            border: 1px solid rgba(var(--color-on-background, 0, 0, 0), var(--color-opacity-tertiary, .12));
            border-radius: inherit;
        }
        .rm-black-surface :host[variant="outlined"] button::before {
            border-color: rgba(255, 255, 255, .12);
            border-color: rgba(var(--color-on-black, 255, 255, 255), var(--color-opacity-tertiary, .12));
        }
        .rm-dark-surface :host[variant="outlined"] button::before {
            border-color: rgba(255, 255, 255, .12);
            border-color: rgba(var(--color-on-dark, 255, 255, 255), var(--color-opacity-tertiary, .12));
        }
        .rm-light-surface :host[variant="outlined"] button::before {
            border-color: rgba(0, 0, 0, .12);
            border-color: rgba(var(--color-on-light, 0, 0, 0), var(--color-opacity-tertiary, .12));
        }
        .rm-white-surface :host[variant="outlined"] button::before {
            border-color: rgba(0, 0, 0, .12);
            border-color: rgba(var(--color-on-white, 0, 0, 0), var(--color-opacity-tertiary, .12));
        }
        
        /* Primary */
        :host[color="primary"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary, 139, 0, 139));
        }
        .rm-black-surface :host[color="primary"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(238, 130, 238);
            color: rgb(var(--color-primary-on-black, 238, 130, 238));
        }
        .rm-dark-surface :host[color="primary"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(238, 130, 238);
            color: rgb(var(--color-primary-on-dark, 238, 130, 238));
        }
        .rm-light-surface :host[color="primary"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary-on-light, 139, 0, 139));
        }
        .rm-white-surface :host[color="primary"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary-on-white, 139, 0, 139));
        }
        :host[color="primary"][variant="raised"],
        :host[color="primary"][variant="unelevated"] {
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary, 139, 0, 139));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-primary, 255, 255, 255));
        }
        .rm-black-surface :host[color="primary"][variant="raised"],
        .rm-black-surface :host[color="primary"][variant="unelevated"] {
            background: rgb(238, 130, 238);
            background: rgb(var(--color-primary-on-black, 238, 130, 238));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-primary-on-black, 255, 255, 255));
        }
        .rm-dark-surface :host[color="primary"][variant="raised"],
        .rm-dark-surface :host[color="primary"][variant="unelevated"] {
            background: rgb(238, 130, 238);
            background: rgb(var(--color-primary-on-dark, 238, 130, 238));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-primary-on-dark, 255, 255, 255));
        }
        .rm-light-surface :host[color="primary"][variant="raised"],
        .rm-light-surface :host[color="primary"][variant="unelevated"] {
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary-on-light, 139, 0, 139));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-primary-on-light, 255, 255, 255));
        }
        .rm-white-surface :host[color="primary"][variant="raised"],
        .rm-white-surface :host[color="primary"][variant="unelevated"] {
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary-on-white, 139, 0, 139));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-primary-on-white, 255, 255, 255));
        }

        /* Accent */
        :host[color="accent"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent, 0, 0, 255));
        }
        .rm-black-surface :host[color="accent"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(30, 144, 255);
            color: rgb(var(--color-accent-on-black, 30, 144, 255));
        }
        .rm-dark-surface :host[color="accent"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(30, 144, 255);
            color: rgb(var(--color-accent-on-dark, 30, 144, 255));
        }
        .rm-light-surface :host[color="accent"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent-on-light, 0, 0, 255));
        }
        .rm-white-surface :host[color="accent"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent-on-white, 0, 0, 255));
        }
        :host[color="accent"][variant="raised"],
        :host[color="accent"][variant="unelevated"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent, 0, 0, 255));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-accent, 255, 255, 255));
        }
        .rm-black-surface :host[color="accent"][variant="raised"],
        .rm-black-surface :host[color="accent"][variant="unelevated"] {
            background: rgb(30, 144, 255);
            background: rgb(var(--color-accent-on-black, 30, 144, 255));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-accent-on-black, 255, 255, 255));
        }
        .rm-dark-surface :host[color="accent"][variant="raised"],
        .rm-dark-surface :host[color="accent"][variant="unelevated"] {
            background: rgb(30, 144, 255);
            background: rgb(var(--color-accent-on-dark, 30, 144, 255));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-accent-on-dark, 255, 255, 255));
        }
        .rm-light-surface :host[color="accent"][variant="raised"],
        .rm-light-surface :host[color="accent"][variant="unelevated"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent-on-light, 0, 0, 255));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-accent-on-light, 255, 255, 255));
        }
        .rm-white-surface :host[color="accent"][variant="raised"],
        .rm-white-surface :host[color="accent"][variant="unelevated"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent-on-white, 0, 0, 255));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-accent-on-white, 255, 255, 255));
        }

        /* Warn */
        :host[color="warn"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(255, 0, 0);
            color: rgb(var(--color-warn, 255, 0, 0));
        }
        .rm-black-surface :host[color="warn"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(255, 69, 0);
            color: rgb(var(--color-warn-on-black, 255, 69, 0));
        }
        .rm-dark-surface :host[color="warn"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(255, 69, 0);
            color: rgb(var(--color-warn-on-dark, 255, 69, 0));
        }
        .rm-light-surface :host[color="warn"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(255, 0, 0);
            color: rgb(var(--color-warn-on-light, 255, 0, 0));
        }
        .rm-white-surface :host[color="warn"]:not([variant="raised"]):not([variant="unelevated"]) {
            color: rgb(255, 0, 0);
            color: rgb(var(--color-warn-on-white, 255, 0, 0));
        }
        :host[color="warn"][variant="raised"],
        :host[color="warn"][variant="unelevated"] {
            background: rgb(255, 0, 0);
            background: rgb(var(--color-warn, 255, 0, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-warn, 255, 255, 255));
        }
        .rm-black-surface :host[color="warn"][variant="raised"],
        .rm-black-surface :host[color="warn"][variant="unelevated"] {
            background: rgb(255, 69, 0);
            background: rgb(var(--color-warn-on-black, 255, 69, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-warn-on-black, 255, 255, 255));
        }
        .rm-dark-surface :host[color="warn"][variant="raised"],
        .rm-dark-surface :host[color="warn"][variant="unelevated"] {
            background: rgb(255, 69, 0);
            background: rgb(var(--color-warn-on-dark, 255, 69, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-warn-on-dark, 255, 255, 255));
        }
        .rm-light-surface :host[color="warn"][variant="raised"],
        .rm-light-surface :host[color="warn"][variant="unelevated"] {
            background: rgb(255, 0, 0);
            background: rgb(var(--color-warn-on-light, 255, 0, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-warn-on-light, 255, 255, 255));
        }
        .rm-white-surface :host[color="warn"][variant="raised"],
        .rm-white-surface :host[color="warn"][variant="unelevated"] {
            background: rgb(255, 0, 0);
            background: rgb(var(--color-warn-on-white, 255, 0, 0));
            color: rgb(255, 255, 255);
            color: rgb(var(--color-on-warn-on-white, 255, 255, 255));
        }

        /* Disabled */
        :host[disabled]:not([disabled="false"]):not([variant="raised"]):not([variant="unelevated"]) {
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-background, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        .rm-black-surface :host[disabled]:not([disabled="false"]):not([variant="raised"]):not([variant="unelevated"]) {
            color: rgba(255, 255, 255, .42);
            color: rgba(var(--color-on-black, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-dark-surface :host[disabled]:not([disabled="false"]):not([variant="raised"]):not([variant="unelevated"]) {
            color: rgba(255, 255, 255, .42);
            color: rgba(var(--color-on-dark, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-light-surface :host[disabled]:not([disabled="false"]):not([variant="raised"]):not([variant="unelevated"]) {
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-light, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        .rm-white-surface :host[disabled]:not([disabled="false"]):not([variant="raised"]):not([variant="unelevated"]) {
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-white, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        :host[disabled][variant="raised"]:not([disabled="false"]),
        :host[disabled][variant="unelevated"]:not([disabled="false"]) {
            background: rgba(0, 0, 0, .12);
            background: rgba(var(--color-on-background, 0, 0, 0), var(--color-opacity-tertiary, .12));
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-background, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        .rm-black-surface :host[disabled][variant="raised"]:not([disabled="false"]),
        .rm-black-surface :host[disabled][variant="unelevated"]:not([disabled="false"]) {
            background: rgba(255, 255, 255, .12);
            background: rgba(var(--color-on-black, 255, 255, 255), var(--color-opacity-tertiary, .12));
            color: rgba(255, 255, 255, .42);
            color: rgba(var(--color-on-black, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-dark-surface :host[disabled][variant="raised"]:not([disabled="false"]),
        .rm-dark-surface :host[disabled][variant="unelevated"]:not([disabled="false"]) {
            background: rgba(255, 255, 255, .12);
            background: rgba(var(--color-on-dark, 255, 255, 255), var(--color-opacity-tertiary, .12));
            color: rgba(255, 255, 255, .42);
            color: rgba(var(--color-on-dark, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-light-surface :host[disabled][variant="raised"]:not([disabled="false"]),
        .rm-light-surface :host[disabled][variant="unelevated"]:not([disabled="false"]) {
            background: rgba(0, 0, 0, .12);
            background: rgba(var(--color-on-light, 0, 0, 0), var(--color-opacity-tertiary, .12));
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-light, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        .rm-white-surface :host[disabled][variant="raised"]:not([disabled="false"]),
        .rm-white-surface :host[disabled][variant="unelevated"]:not([disabled="false"]) {
            background: rgba(0, 0, 0, .12);
            background: rgba(var(--color-on-white, 0, 0, 0), var(--color-opacity-tertiary, .12));
            color: rgba(0, 0, 0, .42);
            color: rgba(var(--color-on-white, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        :host[disabled]:not([disabled="false"]) button {
            background: transparent;
            box-shadow: none;
            cursor: initial;
        }
    </style>

    <script type="ts">
        import { ripple } from "./ripple";
        import riot = require("riot");

        export default {
            onMounted() {
                let button = this.root.querySelector("button");
                button.addEventListener("pointerdown", event => {
                    if (this.state.pressed) {
                        return;
                    }
                    this.update({ pressed: true });
                    let cancel = ev => {
                        if (ev.pointerId !== event.pointerId) {
                            return;
                        }
                        this.update({ pressed: false });
                        window.removeEventListener("pointerup", cancel);
                        window.removeEventListener("pointercancel", cancel);
                    };
                    window.addEventListener("pointerup", cancel);
                    window.addEventListener("pointercancel", cancel);
                });
                if (this.isRaised()) {
                    button.classList.add("mdc-elevation-transition");
                    button.classList.add("mdc-elevation--z2");
                }
                let rippleOptions = this.isIcon() ? { centered: true, unbounded: true, radius: 20 } : {};
                if (!this.isRaised() && !this.isUnelevated()) {
                    rippleOptions.highlight = true;
                }
                rippleOptions.color = "currentColor";
                rippleOptions.stopRippling = true;
                Object.entries(this.props).forEach(entry => {
                    let [key, value] = entry;
                    let rippleKeyMatch = key.match(/ripple([A-Z]\w+)/);
                    if (!rippleKeyMatch) {
                        return;
                    }
                    let rippleKey = rippleKeyMatch[1];
                    rippleKey = rippleKey[0].toLowerCase() + rippleKey.slice(1);
                    let floatValue = parseFloat(value);
                    rippleOptions[rippleKey] = isNaN(floatValue) ? value != null && value !== "false" : floatValue;
                });
                let rippleObj = ripple(button, rippleOptions);
                let shouldBeClick: boolean = false;
                button.addEventListener("keydown", event => {
                    if (event.keyCode === 13) {
                        shouldBeClick = true;
                        requestAnimationFrame(() => {
                            shouldBeClick = false;
                        }, 0);
                    }
                });
                button.addEventListener("keyup", event => {
                    if (event.keyCode === 32) {
                        shouldBeClick = true;
                        requestAnimationFrame(() => {
                            shouldBeClick = false;
                        }, 0);
                    }
                });
                button.addEventListener("click", () => {
                    if (shouldBeClick) {
                        rippleObj.start(null, null, null);
                    }
                });
                let openOverlay = this.props.openOverlay;
                if (openOverlay) {
                    button.addEventListener("click", () => {
                        let overlay = document.querySelector("#" + openOverlay);
                        if (!overlay) {
                            return;
                        }
                        let tag = overlay[riot.__.globals.DOM_COMPONENT_INSTANCE_PROPERTY];
                        if (tag && tag.open) {
                            tag.open();
                        }
                    });
                }
            }
            onUpdated() {
                let button = this.root.querySelector("button");
                if (this.isRaised()) {
                    button.classList.add("mdc-elevation-transition");
                    button.classList.add("mdc-elevation--z"+ (this.state.pressed ? 8: 2));
                    button.classList.remove("mdc-elevation--z"+ (this.state.pressed ? 2: 8));
                } else {
                    // button.classList.remove("mdc-elevation-transition");
                    // button.classList.remove("mdc-elevation--z"+ (this.state.pressed ? 8: 2));
                    // button.classList.remove("mdc-elevation--z"+ (this.state.pressed ? 2: 8));
                }
            }
            isText() {
                return this.props.variant || this.props.variant === "text";
            }
            isRaised() {
                return this.props.variant != null && this.props.variant === "raised";
            }
            isOutlined() {
                return this.props.variant != null && this.props.variant === "outlined";
            }
            isUnelevated() {
                return this.props.variant != null && this.props.variant === "unelevated";
            }
            isIcon() {
                return this.props.variant != null && this.props.variant === "icon";
            }
            isDisabled() {
                let disabled = this.props.disabled;
                return disabled != null && (typeof disabled === "string" ? disabled !== "false" : !!disabled);
            }
            setDisabled(disabled) {
                if (disabled) {
                    this.root.setAttribute("disabled", "");
                } else {
                    this.root.removeAttribute("disabled");
                }
                this.update();
            }
        }
    </script>
</rm-button>