<rm-tabs>
    <div if={ props.tabs }>
        <div style="display: table; width: 100%; text-align: center; white-space: nowrap;" ref="tabs">
            <div each={ (tab, index) in getTabs() } ref="tab"
                onclick={ selecttab.bind(null, index) } class={ tab === state.value ? "selected" : "" }
            ><div style="display: inline-block;">{
                tab
            }</div></div>
        </div>
        <div style="transform: translateX({ getIndicatorLeft() }px) scaleX({ getIndicatorWidth() });" ref="indicator" />
    </div>

    <style>
        :host { display: block; overflow-y: hidden; }
        :host > div {
            display: block;
            width: 100%;
            overflow: auto visible;
            position: relative;
            user-select: none;
        }
        :host > div > [ref=indicator] {
            position: absolute;
            bottom: 0; left: 0;
            height: 2px; width: 1px;
            transition: transform ease-in-out 200ms;
            transform-origin: left;
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary, 139, 0, 139));
        }
        .rm-black-surface :host > div > [ref=indicator] {
            background: rgb(238, 130, 238);
            background: rgb(var(--color-primary-on-black, 238, 130, 238));
        }
        .rm-dark-surface :host > div > [ref=indicator] {
            background: rgb(238, 130, 238);
            background: rgb(var(--color-primary-on-dark, 238, 130, 238));
        }
        .rm-light-surface :host > div > [ref=indicator] {
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary-on-light, 139, 0, 139));
        }
        .rm-white-surface :host > div > [ref=indicator] {
            background: rgb(139, 0, 139);
            background: rgb(var(--color-primary-on-white, 139, 0, 139));
        }
        :host > div > [ref=tabs] > [ref=tab] {
            display: table-cell; width: 1px;
            padding: 12px 16px; cursor: pointer;
            overflow: hidden; position: relative;
            font-size: 16px; line-height: 20px;
        }
        :host > div > [ref=tabs] > [ref=tab].selected {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary, 139, 0, 139));
        }
        .rm-black-surface :host > div > [ref=tabs] > [ref=tab].selected {
            color: rgb(238, 130, 238);
            color: rgb(var(--color-primary-on-black, 238, 130, 238));
        }
        .rm-dark-surface :host > div > [ref=tabs] > [ref=tab].selected {
            color: rgb(238, 130, 238);
            color: rgb(var(--color-primary-on-dark, 238, 130, 238));
        }
        .rm-light-surface :host > div > [ref=tabs] > [ref=tab].selected {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary-on-light, 139, 0, 139));
        }
        .rm-white-surface :host > div > [ref=tabs] > [ref=tab].selected {
            color: rgb(139, 0, 139);
            color: rgb(var(--color-primary-on-white, 139, 0, 139));
        }
    </style>

    <script type="ts">
        import { ripple } from "./ripple";

        export default {
            state: {
                value: null
            },
            getTabs() {
                if (!this.props.tabs) {
                    return null;
                }
                if (Array.isArray(this.props.tabs)) {
                    return this.props.tabs;
                }
                return typeof this.props === "string" ? this.props.split("\n") : null;
            }
            onBeforeMount() {
                this.onBeforeUpdate();
            }
            onMounted() {
                this.onUpdated();
            }
            _lastValue: null,
            onBeforeUpdate() {
                if (this._lastValue != null && this.props.value === this._lastValue) {
                    return;
                }
                this._lastValue = this.props.value;
                let tabs = this.getTabs();
                if (tabs == null) {
                    return;
                }
                if (tabs.includes(this.props.value)) {
                    this.state.value = this.props.value;
                } else {
                    this.state.value = tabs.includes(this.state.value) ? this.state.value : tabs[0];
                }
            },
            onUpdated() {
                Array.prototype.forEach.call(this.root.querySelectorAll("[ref=tab]"), tab => {
                    ripple(tab, { color: "currentColor" });
                });
                let tabsEl = this.root.firstElementChild;
                if (tabsEl) {
                    let h = tabsEl.getBoundingClientRect().height;
                    tabsEl.style.overflow = "hidden";
                    h -= tabsEl.getBoundingClientRect().height;
                    tabsEl.style.overflow = "";
                    tabsEl.style.marginBottom = `-${h}px`;
                }
            }
            getIndicatorLeft() {
                if (!this.props.tabs) {
                    return 0;
                }
                let tabs = this.root.querySelector("[ref=tabs]");
                let index = this.getTabs().indexOf(this.state.value);
                return tabs.children[index].getBoundingClientRect().left - 
                    this.root.getBoundingClientRect().left +
                    this.root.firstElementChild.scrollLeft;
            }
            getIndicatorWidth() {
                if (!this.props.tabs) {
                    return 0;
                }
                return this.root.querySelector("[ref=tabs]").children[this.getTabs().indexOf(this.state.value)].getBoundingClientRect().width;
            }
            selecttab(index) {
                let tabs = this.getTabs();
                if (tabs == null || index >= tabs.length) {
                    return;
                }
                this.update({ value: tabs[index] });
                this.root.dispatchEvent(new CustomEvent("change", { detail: { value: this.state.value, index } }));
            }
        }
    </script>
</rm-tabs>