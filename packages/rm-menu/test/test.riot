<test>
    <rm-menu
        inherit-width keep-highlight variant="flat" onclosing={ menuclose }
        prevent-focus opened={ state.menuopened }
    >
        <rm-list-item onclick={ () => {
            window.console.log("a-ah!");
            closeMenu();
        } } menu-option>Elemento 1</rm-list-item>
        <rm-list-item menu-option>Elemento 2</rm-list-item>
        <rm-list-item passive>Elemento 3</rm-list-item>
        <rm-list-item menu-option selected={ state.selected } onclick={ onclick }>Elemento 4</rm-list-item>
    </rm-menu>
    <button
        onclick={ toggleMenu } onblur={ menuclose }
        id="opener" style="width: 200px; background: white;"
    >Open</button>
    <rm-menu
        inherit-width keep-highlight variant="flat"
        prevent-focus opened
    >
        <rm-list-item onclick={ () => {
            window.console.log("a-ah!");
            closeMenu();
        } } menu-option>Elemento 1</rm-list-item>
        <rm-list-item menu-option>Elemento 2</rm-list-item>
        <rm-list-item passive>Elemento 3</rm-list-item>
        <rm-list-item menu-option selected={ state.selected } onclick={ onclick }>Elemento 4</rm-list-item>
    </rm-menu>

    <script>
        export default {
            state: {
                menuopened: false,
                selected: true
            },
            onMounted() {
                Array.prototype.forEach.call(this.root.querySelectorAll("[ref=ripple]"), el => {
                    riotMaterial.ripple.ripple(el, {
                        highlight: true
                    });
                });
                Array.prototype.forEach.call(this.root.querySelectorAll("[ref=ripplea]"), el => {
                    riotMaterial.ripple.ripple(el);
                });
                const menu = this.menu = this.root.querySelector("rm-menu");
                const opener = this.opener = this.root.querySelector("#opener");
                this.menu._bindTo(this.opener);
                riotMaterial.beforeFocusListener.addListener(opener, () => {
                    return;
                    if (!menu.isOpened()) {
                        menu.setAnchorElement(opener);
                        menu.open();
                    }
                });
            },
            toggleMenu() {
                // if (this.menu.isOpened()) {
                //     this.menu.close();
                // } else {
                //     this.menu.open();
                // }
                this.update({ menuopened: !this.state.menuopened });
            },
            menuclose() {
                if (this.state.menuopened) {
                    this.update({ menuopened: false });
                }
            },
            onclick() {
                this.update({ selected: !this.state.selected});
            }
        }
    </script>
</test>