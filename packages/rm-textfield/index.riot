<rm-textfield>
    <rm-textfield-container variant={ props.variant }
        label={ props.label } full-width={ isFullWidth() } disabled={ isDisabled() }
        class={ _getTextfieldContainerComponentClass() } onmousedown={ _oncontainermousedown}
    >
        <input onfocus={ _oninputfocus } onblur={ _oninputblur } oninput={ _oninputinput }
            value={ props.value } name={ props.name } disabled={ isDisabled() } slot="input"
        >
        <slot name="leading" slot="leading" />
        <span style="white-space: nowrap;" slot="trailing">
            <rm-button variant="icon" onclick={ clear }
                if={ isClearable() && root.value } dense tabindex={ isDisabled() ? "-1" : null }
            >clear</rm-button>
            <slot name="trailing" />
        </span>
    </rm-textfield-container>

    <style>
        :host {
            cursor: text;
        }
        :host[disabled] {
            cursor: default;
        }

        input {
            padding: 0;
            font-size: inherit;
            line-height: inherit;
            border: 0;
            background: none;
            outline: none;
            width: 100%;
            color: currentColor;
        }
    </style>

    <script>
        import TextfieldContainerComponent from "@riot-material/rm-textfield-container";

        export default {
            _input: null,
            onBeforeMount() {
                Object.defineProperty(this.root, "value", {
                    get: () => {
                        return this._input ? this._input.value : this.props.value || "";
                    },
                    set: value => {
                        this._input.value = value;
                    }
                });
            },
            onMounted() {
                this._input = this.root.querySelector("input");
            },
            _oncontainermousedown(event) {
                if (this.props.disabled) {
                    return;
                }
                const input = this.root.querySelector("input");
                if (document.activeElement !== input){
                    event.preventDefault();
                    input.focus();
                }
            },
            _oninputfocus() {
                this.update({ focused: true });
            },
            _oninputblur() {
                this.update({ focused: false });
            },
            _oninputinput() {
                this.update();
            },
            _getTextfieldContainerClass() {
                const names = {};
                if (this.state.focused) {
                    names["rm-focused"] = names["rm-label-should-float"] = true;
                }
                if (this.root.value) {
                    names["rm-label-should-float"] = true;
                }
                return Object.keys(names).join(" ");
            },
            isClearable() {
                return this.props.clearable != null && this.props.clearable !== false;
            },
            isDisabled() {
                return this.props.disabled != null && this.props.disabled !== false;
            },
            isFullWidth() {
                return this.props.fullWidth != null && this.props.fullWidth !== false;
            },
            clear() {
                this.root.value = "";
                this.update();
            },
            components: {
                "rm-textfield-container": TextfieldContainerComponent
            }
        }
    </script>
</rm-textfield>