<rm-radio>
    <label>
        <input type="radio" value={ props.value } name={ props.name } tabindex="0" checked={ isChecked() } disabled={ isDisabled() }>
        <div ref="circle">
            <div ref="border"></div>
            <div ref="radio-circle"></div>
        </div>
        <div style="vertical-align: middle; display: inline-block;">{ props.label }</div>
    </label>
    
    <style>
        :host {
            position: relative;
            font: message-box;
            font-size: 16px;
            cursor: pointer;
            -moz-user-select: none;
            -webkit-user-select: none;
            -ms-user-select: none;
            user-select: none;
            display: inline-block;
            margin-right: 8px;
            outline: none;
            /* https://stackoverflow.com/a/21003770/9228492 */
            -webkit-touch-callout: none;
            -webkit-tap-highlight-color: transparent;
        }
        label {
            cursor: inherit;
            display: inline-block;
        }
        [ref="circle"] {
            height: 1.25em;
            width: 1.25em;
            position: relative;
            display: inline-block;
            vertical-align: middle;
            box-sizing: border-box;
            border-radius: 50%;
            background: transparent;
            margin: 0.25em .5em 0.25em 0;
            outline: none;
            /* https://stackoverflow.com/a/21003770/9228492 */
            -webkit-touch-callout: none;
            -webkit-tap-highlight-color: transparent;
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent, 0, 0, 255));
        }
        .rm-black-surface :host [ref="circle"] {
            color: rgb(30, 144, 255);
            color: rgb(var(--color-accent-on-black, 30, 144, 255));
        }
        .rm-dark-surface :host [ref="circle"] {
            color: rgb(30, 144, 255);
            color: rgb(var(--color-accent-on-dark, 30, 144, 255));
        }
        .rm-light-surface :host [ref="circle"] {
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent-on-light, 0, 0, 255));
        }
        .rm-white-surface :host [ref="circle"] {
            color: rgb(0, 0, 255);
            color: rgb(var(--color-accent-on-white, 0, 0, 255));
        }
        [ref="border"] {
            transition: border-color linear 100ms;
            border: 0.125em solid rgba(0, 0, 0, .42);
            border: 0.125em solid rgba(var(--color-on-background, 0, 0, 0), var(--color-opacity-secondary, .42));
            height: 100%; width: 100%;
            box-sizing: border-box;
            border-radius: inherit;
        }
        .rm-black-surface :host [ref="border"] {
            border-color: rgba(255, 255, 255, .42);
            border-color: rgba(var(--color-on-black, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-dark-surface :host [ref="border"] {
            border-color: rgba(255, 255, 255, .42);
            border-color: rgba(var(--color-on-dark, 255, 255, 255), var(--color-opacity-secondary, .42));
        }
        .rm-light-surface :host [ref="border"] {
            border-color: rgba(0, 0, 0, .42);
            border-color: rgba(var(--color-on-light, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        .rm-white-surface :host [ref="border"] {
            border-color: rgba(0, 0, 0, .42);
            border-color: rgba(var(--color-on-white, 0, 0, 0), var(--color-opacity-secondary, .42));
        }
        [ref="radio-circle"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent, 0, 0, 255));
            position: absolute;
            top: 0.3125em;
            bottom: 0.3125em;
            right: 0.3125em;
            left: 0.3125em;
            text-align: center;
            transition: transform linear 100ms;
            transform: scale(0);
            border-radius: inherit;
        }
        .rm-black-surface :host [ref="radio-circle"] {
            background: rgb(30, 144, 255);
            background: rgb(var(--color-accent-on-black, 30, 144, 255));
        }
        .rm-dark-surface :host [ref="radio-circle"] {
            background: rgb(30, 144, 255);
            background: rgb(var(--color-accent-on-dark, 30, 144, 255));
        }
        .rm-light-surface :host [ref="radio-circle"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent-on-light, 0, 0, 255));
        }
        .rm-white-surface :host [ref="radio-circle"] {
            background: rgb(0, 0, 255);
            background: rgb(var(--color-accent-on-white, 0, 0, 255));
        }
        :host.rm-checked [ref="radio-circle"] {
            transform: scale(1);
        }
        :host.rm-checked [ref="border"] {
            border-color: rgb(0, 0, 255);
            border-color: rgb(var(--color-accent, 0, 0, 255));
        }
        .rm-black-surface :host.rm-checked [ref="border"] {
            border-color: rgb(30, 144, 255);
            border-color: rgb(var(--color-accent-on-black, 30, 144, 255));
        }
        .rm-dark-surface :host.rm-checked [ref="border"] {
            border-color: rgb(30, 144, 255);
            border-color: rgb(var(--color-accent-on-dark, 30, 144, 255));
        }
        .rm-light-surface :host.rm-checked [ref="border"] {
            border-color: rgb(0, 0, 255);
            border-color: rgb(var(--color-accent-on-light, 0, 0, 255));
        }
        .rm-white-surface :host.rm-checked [ref="border"] {
            border-color: rgb(0, 0, 255);
            border-color: rgb(var(--color-accent-on-white, 0, 0, 255));
        }
        input {
            /* from cdk-visually-hidden (Component dev kit, Angular Material) */
            border: 0;
            position: absolute;
            overflow: hidden;
            clip: rect(0 0 0 0);
            height: 1px; width: 1px;
            margin: -1px;
            padding: 0; outline: 0;
            -webkit-appearance: none;
            -moz-appearance: none;
        }
    </style>

    <script>
        import { ripple } from "@riot-material/ripple";

        export default {
            onMounted() {
                const circle = this.root.querySelector("[ref=circle]");
                const input = this.root.querySelector("input");
                const circleRipple = ripple(
                    circle,
                    {
                        centered: true,
                        unbounded: true,
                        radius: 16,
                        unboundedFocus: true,
                        focusTarget: input,
                        color: "currentColor"
                    }
                );
                const refreshUI = () => {
                    if (input.checked) {
                        this.root.classList.add("rm-checked");
                    } else {
                        this.root.classList.remove("rm-checked");
                    }
                }
                const refresh = () => {
                    refreshUI();
                    const name = this.getName();
                    if (!name) {
                        return;
                    }
                    let parent = this.root;
                    while (parent = parent.parentElement) {
                        if (parent.tagName === "FORM") {
                            break;
                        }
                    }
                    if (!parent) {
                        parent = document;
                    }
                    const selector = "input[type=radio][name=\"" + name + "\"]";
                    const invertedMask = parent.querySelectorAll(":scope form " + selector);
                    Array.prototype.forEach.call(
                        parent.querySelectorAll(selector),
                        input => {
                            if (Array.prototype.some.call(invertedMask, masked => {
                                return masked === input;
                            })) {
                                return;
                            }
                            input.dispatchEvent(new Event("unchecked"));
                        }
                    );
                }
                input.addEventListener("change", refresh);
                input.addEventListener("unchecked", refreshUI);
                refresh();
            },
            onUpdated() {
                ripple(this.root.querySelector("[ref=circle]"), {
                    disabled: this.isDisabled()
                });
            },
            getName() {
                const name = this.props.name;
                return typeof name === "string" && !name.match(/^\s*$/) ? name : null;
            },
            isChecked() {
                return this.props.checked != null && this.props.checked !== false;
            },
            isDisabled() {
                return this.props.disabled != null && this.props.disabled !== false;
            }
        }
    </script>
</rm-radio>